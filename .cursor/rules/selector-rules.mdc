---

# FUNCTION SELECTOR RULES

Function selector hesaplama hatalarını önlemek için kritik kurallar.

## YASAK YÖNTEMLER ❌

### Manual Hash Hesaplama
```javascript
// ❌ YANLIŞ - Node.js crypto ile manuel hesaplama
const crypto = require('crypto');
const hash = crypto.createHash('sha3-256').update('getGreeting()').digest('hex');
const selector = '0x' + hash.slice(0, 8); // YANLIŞ SONUÇ!
```

### Hardcoded Selectors
```typescript
// ❌ YANLIŞ - Manuel olarak tahmin edilen selectorlar
const testFacetSelectors = [
  "0x76a631c0", // getGreeting() - YANLIŞ!
  "0x62738998", // getCallerInfo() - YANLIŞ!
];
```

## DOĞRU YÖNTEMLER ✅

### 1. Hardhat Contract Interface Kullanımı
```typescript
// ✅ DOĞRU - Hardhat Contract Factory interface
const TestFacet = await ethers.getContractFactory("TestFacet");
const iface = TestFacet.interface;

const selector = iface.getFunction("getGreeting")?.selector;
console.log("Correct selector:", selector); // 0xfe50cc72
```

### 2. Otomatik Selector Collection
```typescript
// ✅ DOĞRU - Tüm fonksiyonlar için otomatik toplama
const TestFacet = await ethers.getContractFactory("TestFacet");
const iface = TestFacet.interface;

const functions = ["getGreeting", "getCallerInfo", "getSecretMessage", "getMagicNumber"];
const selectors: string[] = [];

functions.forEach(funcName => {
  const selector = iface.getFunction(funcName)?.selector;
  if (selector) {
    selectors.push(selector);
  }
});
```

### 3. Helper Script ile Verification
```typescript
// ✅ DOĞRU - Selector doğrulama scripti
async function getCorrectSelectors(contractName: string, functionNames: string[]) {
  const Contract = await ethers.getContractFactory(contractName);
  const iface = Contract.interface;
  
  const selectors: string[] = [];
  functionNames.forEach(funcName => {
    const selector = iface.getFunction(funcName)?.selector;
    if (selector) {
      console.log(`  ${funcName}(): ${selector}`);
      selectors.push(selector);
    }
  });
  
  return selectors;
}
```

## HATA TESPİTİ 🔍

### Diamond'da "Function does not exist" Hatası
Bu hata genellikle yanlış selector kullanımından kaynaklanır:

```
❌ execution reverted: BraveUniverseDiamond: Function does not exist
```

**Çözüm:**
1. Selector'ları hardhat interface ile tekrar hesapla
2. Diamond'daki mevcut selector'ları kontrol et
3. Yanlış selector'ları kaldır, doğrularını ekle

### Verification Komutu
```bash
# Diamond'daki mevcut selector'ları kontrol et
npx hardhat run scripts/verify-diamond.ts --network luksoTestnet
```

## WORKFLOW 📋

### Yeni Facet Ekleme Süreci
1. **Contract yazmadan önce**: Fonksiyon isimlerini planla
2. **Contract yazdıktan sonra**: Compile et
3. **Selector hesapla**: Hardhat interface kullan
4. **DiamondCut hazırla**: Doğru selector'larla
5. **Test et**: Ekleme sonrası fonksiyonları çağır
6. **Verify et**: Diamond verification script çalıştır

### Acil Durum Temizleme
```typescript
// Yanlış selector'ları temizlemek için
const removeDiamondCut = [{
  facetAddress: ethers.ZeroAddress,
  action: 2, // Remove
  functionSelectors: ["0xYANLIS_SELECTOR1", "0xYANLIS_SELECTOR2"]
}];
```

## ÖNEMLI NOTLAR ⚠️

- Node.js `crypto.createHash('sha3-256')` **Ethereum keccak256 ile aynı değil**
- Manuel hesaplama **asla güvenilir değil**
- Hardhat interface **her zaman doğru sonuç verir**
- Selector çakışması durumunda Diamond **ilk eklenen fonksiyonu kullanır**

✅ **KURAL**: Selector hesaplamada sadece Hardhat Contract Interface kullan!