---
description: Rules and best practices for safely handling function selectors in BraveUniverse facets.
globs:
  - "**/*.ts"
  - "**/*.js"
  - "**/*.sol"
mode: always
---

# FUNCTION SELECTOR RULES

Critical rules to avoid incorrect selector computation and deployment errors.

## ‚ùå FORBIDDEN PRACTICES

### Manual Hash Calculation

```ts
// ‚ùå WRONG ‚Äì Manual selector using Node.js crypto
const crypto = require('crypto');
const hash = crypto.createHash('sha3-256').update('getGreeting()').digest('hex');
const selector = '0x' + hash.slice(0, 8); // ‚ùå Incorrect result!
Hardcoded Selectors
// ‚ùå WRONG ‚Äì Manually written selectors
const testFacetSelectors = [
  "0x76a631c0", // getGreeting() ‚Äì ‚ùå Wrong!
  "0x62738998", // getCallerInfo() ‚Äì ‚ùå Wrong!
];
‚úÖ CORRECT METHODS

1. Use Hardhat Contract Interface
const TestFacet = await ethers.getContractFactory("TestFacet");
const iface = TestFacet.interface;
const selector = iface.getFunction("getGreeting")?.selector;
console.log("Correct selector:", selector); // ‚úÖ 0xfe50cc72
2. Auto-collect Selectors
const TestFacet = await ethers.getContractFactory("TestFacet");
const iface = TestFacet.interface;

const functions = ["getGreeting", "getCallerInfo"];
const selectors: string[] = [];

functions.forEach(funcName => {
  const selector = iface.getFunction(funcName)?.selector;
  if (selector) selectors.push(selector);
});
3. Selector Verifier Script
async function getCorrectSelectors(contractName: string, functionNames: string[]) {
  const Contract = await ethers.getContractFactory(contractName);
  const iface = Contract.interface;

  const selectors: string[] = [];
  functionNames.forEach(funcName => {
    const selector = iface.getFunction(funcName)?.selector;
    if (selector) {
      console.log(`${funcName}(): ${selector}`);
      selectors.push(selector);
    }
  });

  return selectors;
}
üîç TROUBLESHOOTING

Diamond ‚ÄúFunction does not exist‚Äù Error

Typical error caused by wrong selectors:
‚ùå execution reverted: BraveUniverseDiamond: Function does not exist
Fix:
	1.	Recalculate selectors with Hardhat
	2.	Check existing selectors on Diamond
	3.	Remove invalid selectors, re-add correct ones
Verify Selectors on Diamond
npx hardhat run scripts/verify-diamond.ts --network luksoTestnet
Emergency Selector Cleanup
const removeCut = [{
  facetAddress: ethers.ZeroAddress,
  action: 2, // Remove
  functionSelectors: ["0xBAD_SELECTOR"]
}];

üìã WORKFLOW

New Facet Procedure
	1.	Plan function names first
	2.	Write contract & compile
	3.	Use interface to extract selectors
	4.	Prepare diamondCut with correct selectors
	5.	Run full test suite
	6.	Verify deployment

‚ö†Ô∏è IMPORTANT NOTES
	‚Ä¢	crypto.createHash('sha3-256') is NOT the same as Ethereum keccak256
	‚Ä¢	NEVER rely on manual selector calculation
	‚Ä¢	Hardhat interface is the ONLY safe method
	‚Ä¢	On conflict, Diamond uses the first added selector

‚úÖ RULE: Always use Hardhat‚Äôs Contract.interface to generate function selectors!



