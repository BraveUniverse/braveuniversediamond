import { ethers } from "hardhat";

async function main() {
    console.log("üîç Gridotto V2 - Draw ID Debug");
    console.log("=".repeat(60));

    const DIAMOND_ADDRESS = "0x5Ad808FAE645BA3682170467114e5b80A70bF276";
    
    const adminFacet = await ethers.getContractAt("GridottoAdminFacet", DIAMOND_ADDRESS);
    const coreFacet = await ethers.getContractAt("GridottoCoreV2Facet", DIAMOND_ADDRESS);
    
    // Storage deƒüerlerini kontrol et
    const nextDrawId = await adminFacet.getNextDrawId();
    const stats = await adminFacet.getPlatformStatistics();
    
    console.log("üìä Storage Deƒüerleri:");
    console.log("- nextDrawId:", nextDrawId.toString());
    console.log("- totalDrawsCreated:", stats.totalDrawsCreated.toString());
    console.log("- Fark:", (Number(stats.totalDrawsCreated) - Number(nextDrawId) + 1).toString());
    
    console.log("\nüîç 1-20 Arasƒ± T√ºm Draw ID'leri Kontrol Ediyorum:");
    console.log("=".repeat(60));
    
    const existingDraws = [];
    const missingDraws = [];
    
    for (let i = 1; i <= 20; i++) {
        try {
            const draw = await coreFacet.getDrawDetails(i);
            
            // Draw varsa
            if (draw.creator !== '0x0000000000000000000000000000000000000000') {
                existingDraws.push(i);
                console.log(`‚úÖ Draw #${i} MEVCUT - Tip: ${getDrawTypeName(draw.drawType)}, Olu≈üturan: ${draw.creator.slice(0,10)}...`);
            } else {
                missingDraws.push(i);
                console.log(`‚ùå Draw #${i} BO≈û`);
            }
        } catch (error) {
            missingDraws.push(i);
            console.log(`‚ùå Draw #${i} HATA - Muhtemelen yok`);
        }
    }
    
    console.log("\nüìä √ñZET:");
    console.log("=".repeat(60));
    console.log(`‚úÖ Mevcut Draw ID'leri (${existingDraws.length} adet):`, existingDraws.join(", "));
    console.log(`‚ùå Eksik Draw ID'leri (${missingDraws.length} adet):`, missingDraws.join(", "));
    
    // Pattern analizi
    console.log("\nüîç PATTERN ANALƒ∞Zƒ∞:");
    if (existingDraws.length > 0) {
        const gaps = [];
        for (let i = 1; i < existingDraws.length; i++) {
            if (existingDraws[i] - existingDraws[i-1] > 1) {
                gaps.push(`${existingDraws[i-1]} -> ${existingDraws[i]}`);
            }
        }
        if (gaps.length > 0) {
            console.log("‚ö†Ô∏è  ID'lerde bo≈üluklar var:", gaps.join(", "));
        }
    }
    
    // √ñnerilen √ß√∂z√ºm
    console.log("\nüí° √ñNERƒ∞LEN √á√ñZ√úM:");
    console.log("1. T√ºm mevcut draw'larƒ± iterate etmek i√ßin 1'den totalDrawsCreated'a kadar d√∂ng√º kullan");
    console.log("2. Her ID i√ßin try-catch ile kontrol et");
    console.log("3. Bo≈ü/hatalƒ± ID'leri atla");
    console.log("4. Ya da getAllActiveDraws() gibi bir fonksiyon ekle");
}

function getDrawTypeName(drawType: number): string {
    const types = ["USER_LYX", "USER_LSP7", "USER_LSP8", "PLATFORM_WEEKLY", "PLATFORM_MONTHLY"];
    return types[drawType] || "UNKNOWN";
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    });